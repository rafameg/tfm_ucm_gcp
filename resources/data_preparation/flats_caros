{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Importamos todas las librerías necesarias para realizar el modelo completo\n",
    "import pandas as pd\n",
    "import xgboost as xgb\n",
    "import numpy as np\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "from sklearn.model_selection import KFold\n",
    "from sklearn.model_selection import cross_val_score\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "# cross validation\n",
    "from sklearn.model_selection import KFold\n",
    "from sklearn.model_selection import cross_val_score, cross_val_predict\n",
    "SEED=100\n",
    "np.random.seed(SEED)\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.metrics import mean_squared_error, r2_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Index(['FBaths', 'Style', 'HBaths', 'SqFt_Liv_Area', 'Year_Built',\n",
      "       'Assoc_Fee_Paid', 'Carpeted', 'Ocean_View', 'One_Space', 'Pets_Allowed',\n",
      "       'Waterfront', 'Intracoastal_View', 'No_Lease_Onest_Year_Owned',\n",
      "       'Garage_Spaces', 'Ceramic', 'Tile', 'Beds', 'Housing_Older_Persons_Act',\n",
      "       'Two_Or_More_Spaces', 'Wood', 'East_Of_Us_One', 'Ok_To_Lease',\n",
      "       'Corner_Unit', 'Zip_Code', 'Sale_Price'],\n",
      "      dtype='object')\n"
     ]
    }
   ],
   "source": [
    "###Importamos dataset original llamado datamenosdeseis,en este dataset estan todas las observaciones menores a 600.000 dólares\n",
    "###Muy importante que tengas la variable Sale_Price la última en el orden de columnas\n",
    "dataset = pd.read_csv('C:/Users/0016503/Desktop/datamas.csv',sep=',',quotechar='\\\"',index_col=0)\n",
    "print(dataset.columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Index(['FBaths', 'Style', 'HBaths', 'SqFt_Liv_Area', 'Year_Built',\n",
      "       'Assoc_Fee_Paid', 'Carpeted', 'Ocean_View', 'One_Space', 'Pets_Allowed',\n",
      "       'Waterfront', 'Intracoastal_View', 'No_Lease_Onest_Year_Owned',\n",
      "       'Garage_Spaces', 'Ceramic', 'Tile', 'Beds', 'Housing_Older_Persons_Act',\n",
      "       'Two_Or_More_Spaces', 'Wood', 'East_Of_Us_One', 'Ok_To_Lease',\n",
      "       'Corner_Unit', 'Zip_Code', 'Sale_Price'],\n",
      "      dtype='object')\n",
      "   FBaths  Style  HBaths  SqFt_Liv_Area  Year_Built  Assoc_Fee_Paid  Carpeted  \\\n",
      "1       2      1       0           1088        2008           21960         0   \n",
      "2       3      1       0           1647        2018               0         0   \n",
      "3       3      1       0              0        2015           11304         0   \n",
      "4       3      1       0           1442        2017           11400         0   \n",
      "5       3      1       0           1314        2017               0         0   \n",
      "\n",
      "   Ocean_View  One_Space  Pets_Allowed  ...  Tile  Beds  \\\n",
      "1           0          1             1  ...     1     2   \n",
      "2           1          1             1  ...     0     3   \n",
      "3           0          1             2  ...     0     2   \n",
      "4           0          1             1  ...     0     2   \n",
      "5           0          1             2  ...     0     2   \n",
      "\n",
      "   Housing_Older_Persons_Act  Two_Or_More_Spaces  Wood  East_Of_Us_One  \\\n",
      "1                          2                   0     0               0   \n",
      "2                          2                   0     0               0   \n",
      "3                          1                   0     0               0   \n",
      "4                          1                   0     0               0   \n",
      "5                          1                   0     0               0   \n",
      "\n",
      "   Ok_To_Lease  Corner_Unit  Zip_Code  Sale_Price  \n",
      "1            1            0     33139    654000.0  \n",
      "2            0            0     33160    625000.0  \n",
      "3            0            0     33131    615000.0  \n",
      "4            1            1     33131    600000.0  \n",
      "5            0            0     33131    680000.0  \n",
      "\n",
      "[5 rows x 25 columns]\n"
     ]
    }
   ],
   "source": [
    "#Importamos dataset que se llama prueba esto solo lo usamos para la función predict es un dataset aparte \n",
    "#Nos servira para cuando tengamos que meter datos nuevos por el usuario para ver que funciona bien la función predict\n",
    "datatest = pd.read_csv('C:/Users/0016503/Desktop/Pisosdepuradoscarosprueba.csv',sep=',',quotechar='\\\"',index_col=0)\n",
    "print(datatest.columns)\n",
    "print(datatest.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "#X seran todas las variables independientes y Y la variable depediente 'Sale_Price'\n",
    "#Por este motivo hay que colocar la variable objetivo la última para que cuando la separemos del dataset \n",
    "#este colocada en primer lugar, si estuviera en el lugar 7 borrariamos del dataset las 7 últimas variables del dataset\n",
    "X, y = dataset.iloc[:,:-1], dataset.iloc[:,-1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Separamos en test 20% y train 80%\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size= 0.2, random_state=123)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "798      725000.0\n",
       "111      610000.0\n",
       "2183    1315000.0\n",
       "733      710000.0\n",
       "950      755000.0\n",
       "          ...    \n",
       "1148     800000.0\n",
       "2155    1290000.0\n",
       "1767    1037000.0\n",
       "1123     800000.0\n",
       "1347     850000.0\n",
       "Name: Sale_Price, Length: 2356, dtype: float64"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Observo que no habido ningún problema y la variable depediente es Sale_Price\n",
    "y_train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Aqui es donde debo colocar las mejores variables que hemos obtenido en la selección de variables\n",
    "#Colocar las variables que más información aportan al modelo\n",
    "all_columns_except_target_uno = [col for col in X_train.columns if col in ['FBaths','Style','HBaths','SqFt_Liv_Area','Year_Built',\n",
    "'Assoc_Fee_Paid','Carpeted','Ocean_View',\n",
    "'One_Space','Pets_Allowed','Waterfront','Intracoastal_View',\n",
    "'No_Lease_Onest_Year_Owned','Garage_Spaces'\n",
    ",'Ceramic','Tile','Beds','Housing_Older_Persons_Act',\n",
    "'Two_Or_More_Spaces','Wood','East_Of_Us_One'\n",
    ",'Ok_To_Lease','Corner_Unit','Zip_Code']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Me quedo en los datos train con la selección de variable que hemos seleccionado y la variable objetivo\n",
    "DM_train = xgb.DMatrix(data=X_train[all_columns_except_target_uno], label=y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Parametros para el xgboost, aqui es donde se juega con los distintos parametros del Xgboost\n",
    "params = {\"objective\":\"reg:linear\",'colsample_bytree': 1,'learning_rate': 0.2,\n",
    "        'max_depth': 6, 'min_child_weight' : 5, 'gamma' : 0, 'subsample' : 1}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[17:25:38] WARNING: src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n"
     ]
    }
   ],
   "source": [
    "#Aplicamos el xgboost a los datos train colocando el número de arboles que mejor funciona en mi caso 800\n",
    "xg_reg = xgb.train(params = params, dtrain=DM_train, num_boost_round=800)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Aqui es donde debo colocar las mejores variables que hemos obtenido en la selección de variables \n",
    "#Deben ser las mismas que hemos colocado en el X_train logicamente\n",
    "all_columns_except_target_dos = [col for col in X_test.columns if col in ['FBaths','Style','HBaths','SqFt_Liv_Area','Year_Built',\n",
    "'Assoc_Fee_Paid','Carpeted','Ocean_View',\n",
    "'One_Space','Pets_Allowed','Waterfront','Intracoastal_View',\n",
    "'No_Lease_Onest_Year_Owned','Garage_Spaces'\n",
    ",'Ceramic','Tile','Beds','Housing_Older_Persons_Act',\n",
    "'Two_Or_More_Spaces','Wood','East_Of_Us_One'\n",
    ",'Ok_To_Lease','Corner_Unit','Zip_Code']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Me quedo en los datos test con la selección de variable que hemos seleccionado y la variable objetivo\n",
    "DM_test = xgb.DMatrix(data=X_test[all_columns_except_target_dos],label=dataset['Sale_Price'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Predecimos los datos test con el modelo creado\n",
    "preds = xg_reg.predict(DM_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean squared error: 119696795336.76\n",
      "Variance score: 0.69\n"
     ]
    }
   ],
   "source": [
    "# Error cuadrático medio\n",
    "print(\"Mean squared error: %.2f\" % mean_squared_error(y_test, preds))\n",
    "# Evaluamos el puntaje de varianza (siendo 1.0 el mejor posible)\n",
    "print('Variance score: %.2f' % r2_score(y_test, preds))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "xgb.plot_importance(xg_reg)\n",
    "plt.rcParams['figure.figsize'] = [5, 5]\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Z son las variables independientes de la nueva base de datos llamada datatest y w es la variable objetivo\n",
    "Z, w = datatest.iloc[:,:-1], datatest.iloc[:,-1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Necesitamos las mismas variables para nuestro nuevo datatest que utilizamos para el modelo\n",
    "all_columns_except_target_tres = [col for col in Z.columns if col in ['FBaths','Style','HBaths','SqFt_Liv_Area','Year_Built',\n",
    "'Assoc_Fee_Paid','Carpeted','Ocean_View',\n",
    "'One_Space','Pets_Allowed','Waterfront','Intracoastal_View',\n",
    "'No_Lease_Onest_Year_Owned','Garage_Spaces',\n",
    "'Ceramic','Tile','Beds','Housing_Older_Persons_Act',\n",
    "'Two_Or_More_Spaces','Wood','East_Of_Us_One'\n",
    ",'Ok_To_Lease','Corner_Unit','Zip_Code']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Le implanto al dataset las variables seleccionadas\n",
    "DM_prueba = xgb.DMatrix(data=Z[all_columns_except_target_tres], label=w)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   FBaths  Style  HBaths  SqFt_Liv_Area  Year_Built  Assoc_Fee_Paid  Carpeted  \\\n",
      "1       2      1       0           1088        2008           21960         0   \n",
      "2       3      1       0           1647        2018               0         0   \n",
      "3       3      1       0              0        2015           11304         0   \n",
      "4       3      1       0           1442        2017           11400         0   \n",
      "5       3      1       0           1314        2017               0         0   \n",
      "\n",
      "   Ocean_View  One_Space  Pets_Allowed  ...  Ceramic  Tile  Beds  \\\n",
      "1           0          1             1  ...        0     1     2   \n",
      "2           1          1             1  ...        1     0     3   \n",
      "3           0          1             2  ...        0     0     2   \n",
      "4           0          1             1  ...        0     0     2   \n",
      "5           0          1             2  ...        1     0     2   \n",
      "\n",
      "   Housing_Older_Persons_Act  Two_Or_More_Spaces  Wood  East_Of_Us_One  \\\n",
      "1                          2                   0     0               0   \n",
      "2                          2                   0     0               0   \n",
      "3                          1                   0     0               0   \n",
      "4                          1                   0     0               0   \n",
      "5                          1                   0     0               0   \n",
      "\n",
      "   Ok_To_Lease  Corner_Unit  Zip_Code  \n",
      "1            1            0     33139  \n",
      "2            0            0     33160  \n",
      "3            0            0     33131  \n",
      "4            1            1     33131  \n",
      "5            0            0     33131  \n",
      "\n",
      "[5 rows x 24 columns]\n"
     ]
    }
   ],
   "source": [
    "print(Z.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Aplicamos el predict con el modelo creado sobre los nuevos datos\n",
    "pred = xg_reg.predict(DM_prueba)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 657877.8 ,  625042.44,  614372.2 ,  602115.7 ,  799106.  ,\n",
       "        658835.56,  626035.7 ,  663948.94,  643845.5 , 1127734.5 ,\n",
       "       1262890.6 ,  703112.9 ,  618882.44,  893659.56, 1060139.4 ,\n",
       "        620214.8 ,  640072.56,  676954.5 ,  694584.2 ,  619267.7 ,\n",
       "        496740.44,  699392.06,  641883.94,  654884.5 ,  879820.56,\n",
       "        652298.75,  641302.94,  960027.44,  602300.75,  678242.4 ,\n",
       "       1001730.6 , 1064763.6 ,  831282.3 ,  599035.3 ,  697335.3 ,\n",
       "        690186.4 ,  648503.6 ,  678477.8 ,  613483.5 ,  776569.8 ,\n",
       "        778082.56,  731278.44,  804579.94,  967199.1 ,  601989.2 ,\n",
       "        620606.2 ,  919091.  ,  574763.56,  634941.8 ,  671649.1 ,\n",
       "        610089.4 ,  617219.2 ,  609899.06,  611233.56,  610307.56,\n",
       "        609050.06,  671253.2 ,  613014.75,  933269.06,  728040.56,\n",
       "        923712.44,  638962.4 ,  841047.9 ,  869900.1 , 1054904.4 ,\n",
       "        645013.2 ,  618299.9 ,  690491.5 ,  644813.1 ,  663458.8 ,\n",
       "        619042.3 ,  671473.25,  672882.8 , 1088386.4 ,  769773.9 ,\n",
       "        672657.7 ,  617417.8 ,  664352.06,  821593.8 ,  747754.06,\n",
       "        683823.9 ,  651299.9 ,  681462.7 ,  670084.7 ,  767271.25,\n",
       "        956426.56,  641793.25,  692277.6 ,  656186.25,  619461.1 ,\n",
       "        801084.8 ,  833948.9 ,  905956.06,  663111.8 ,  631007.7 ,\n",
       "        616444.75,  773967.6 ,  793634.6 ,  763199.5 ,  624567.56,\n",
       "        606450.56,  629058.6 ,  593884.25,  674811.06,  839764.4 ,\n",
       "        631817.56,  618875.7 ,  627904.  , 1854244.8 ,  685422.5 ,\n",
       "        767231.  ,  713342.94,  828356.5 ,  659862.94,  657271.06,\n",
       "        795741.3 ,  657048.9 ,  660015.9 ,  797560.2 ,  910907.2 ,\n",
       "        640617.  ,  678242.4 ,  635920.4 ,  658117.2 ,  726791.8 ,\n",
       "       1042009.06,  675227.06,  651746.7 ,  674601.06,  630959.94,\n",
       "        644692.3 ,  695325.  ,  648310.6 ,  956481.75,  600058.6 ,\n",
       "        670537.56,  736954.1 ,  669341.94,  673228.7 ,  633921.8 ,\n",
       "        626002.44,  599605.75,  697201.5 ,  620439.94,  864304.  ,\n",
       "        744060.56,  649175.8 ,  650728.06,  679831.6 ,  694621.6 ,\n",
       "        619680.7 ,  662559.7 , 1135113.9 ,  699981.44,  689027.94,\n",
       "        982499.9 ,  631125.  ,  669617.94,  599641.3 ,  660301.9 ,\n",
       "        923899.3 ,  648038.25,  613719.1 ,  817271.  ,  917082.25,\n",
       "        673293.06,  627589.06,  627589.06,  762594.2 ,  831821.44,\n",
       "        859199.4 ,  757540.56,  677246.44, 1081238.2 ,  611029.6 ,\n",
       "       1016006.25,  714604.3 ,  629745.7 ,  755015.25,  687455.9 ,\n",
       "        601551.8 ,  699838.3 ,  655714.8 ,  715971.6 ,  708483.5 ,\n",
       "        601472.5 ,  675040.44,  651686.56,  608790.3 ,  623799.2 ,\n",
       "        703760.94,  674653.7 ,  837448.25,  622712.  ,  613324.  ,\n",
       "        658791.4 ,  731612.56,  775119.06,  772940.75,  658406.2 ,\n",
       "        612091.56,  793155.44,  674314.7 ,  778874.6 ,  777072.1 ,\n",
       "        874786.2 ,  780122.06,  604229.1 ,  573329.44,  652144.5 ,\n",
       "        643214.56, 1046767.06, 1397925.9 ,  676257.1 ,  667690.75,\n",
       "       1030493.9 , 1055363.5 , 1082030.1 ,  631909.8 , 1012522.1 ,\n",
       "        664983.44,  660719.2 ,  611744.7 ,  614246.06,  961770.56,\n",
       "        813154.7 ,  603698.3 ,  639349.1 ,  658303.2 ,  869294.6 ,\n",
       "        636333.6 ,  613800.75,  641604.8 ,  725830.4 ,  969893.94,\n",
       "       1108112.9 ,  751057.9 ,  726665.5 ,  861697.9 ,  618935.3 ,\n",
       "        692510.7 ,  653158.9 ,  934593.1 ,  737706.8 ,  719256.4 ,\n",
       "        647657.5 ,  677213.75,  705117.44,  623331.4 ,  662108.7 ,\n",
       "        619231.2 ,  882548.94,  699062.5 ,  601645.44,  652917.3 ,\n",
       "        651160.9 ,  619024.4 , 1082874.8 ,  614604.8 ,  955626.7 ,\n",
       "        719354.2 ,  644260.9 ,  668526.6 ,  602167.5 ,  613601.2 ,\n",
       "        595710.8 ,  625186.75, 1201737.9 ,  535428.3 ,  673734.56,\n",
       "        704471.8 ,  631129.5 ,  688473.56,  586933.06,  653649.06,\n",
       "        572937.4 ,  651364.4 ,  652186.7 ,  972129.94,  630737.9 ,\n",
       "        614095.1 ,  659664.1 , 1160365.  , 1168297.5 ,  641169.4 ,\n",
       "        619498.6 ,  659158.3 ,  616722.2 ,  641012.56,  676711.25,\n",
       "        758613.94,  602985.25,  637681.1 ,  702672.7 ,  671901.8 ,\n",
       "        908654.56,  856076.44,  752425.25,  657773.2 ,  682157.  ,\n",
       "       1189260.4 ,  540085.7 ,  597266.5 ,  622692.9 ,  650813.9 ,\n",
       "        617775.9 ,  618745.2 ,  646235.9 ,  661938.2 , 1406309.5 ,\n",
       "        712309.25,  618252.25,  718484.3 ,  627402.06,  749731.5 ,\n",
       "        601319.56,  630170.75,  687616.7 ,  650224.8 ,  695428.  ,\n",
       "        632879.4 ,  677039.3 ,  605736.9 ,  690589.5 ,  743185.6 ,\n",
       "       1384653.4 ], dtype=float32)"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Comprobamos que dan resultados, este paso solo nos sirve para cuando el usuario rellene los datos ver que generan puntuaciones\n",
    "pred"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import scipy.stats\n",
    "\n",
    "\n",
    "def mean_confidence_interval(pred, confidence=0.99):\n",
    "    a = 1.0 * np.array(pred)\n",
    "    n = len(a)\n",
    "    m, se = np.mean(a), scipy.stats.sem(a)\n",
    "    h = se * scipy.stats.t.ppf((1 + confidence) / 2., n-1)\n",
    "    return m, m-h, m+h"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(728782.44, 705328.8160248074, 752236.0589751926)"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mean_confidence_interval(pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 812,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['modelo_XGBM_Mayoraseis_Flats.xg_reg']"
      ]
     },
     "execution_count": 812,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import joblib\n",
    "filename = \"modelo_XGBM_Mayoraseis_Flats.xg_reg\"\n",
    "joblib.dump(xg_reg, filename)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
