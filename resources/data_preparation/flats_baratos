{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Importamos todas las librerías necesarias para realizar el modelo completo\n",
    "import pandas as pd\n",
    "import xgboost as xgb\n",
    "import numpy as np\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "from sklearn.model_selection import KFold\n",
    "from sklearn.model_selection import cross_val_score\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "# cross validation\n",
    "from sklearn.model_selection import KFold\n",
    "from sklearn.model_selection import cross_val_score, cross_val_predict\n",
    "SEED=100\n",
    "np.random.seed(SEED)\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.metrics import mean_squared_error, r2_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Index(['FBaths', 'Style', 'HBaths', 'SqFt_Liv_Area', 'Year_Built',\n",
      "       'Assoc_Fee_Paid', 'Carpeted', 'Ocean_View', 'One_Space', 'Pets_Allowed',\n",
      "       'Waterfront', 'Intracoastal_View', 'No_Lease_Onest_Year_Owned',\n",
      "       'Garage_Spaces', 'Ceramic', 'Tile', 'Beds', 'Housing_Older_Persons_Act',\n",
      "       'Two_Or_More_Spaces', 'Wood', 'East_Of_Us_One', 'Ok_To_Lease',\n",
      "       'Corner_Unit', 'Zip_Code', 'Sale_Price'],\n",
      "      dtype='object')\n"
     ]
    }
   ],
   "source": [
    "###Importamos dataset original llamado datamenosdeseis,en este dataset estan todas las observaciones menores a 600.000 dólares\n",
    "###Muy importante que tengas la variable Sale_Price la última en el orden de columnas\n",
    "dataset = pd.read_csv('datamenos.csv',sep=',',quotechar='\\\"',index_col=0)\n",
    "print(dataset.columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "#X seran todas las variables independientes y Y la variable depediente 'Sale_Price'\n",
    "#Por este motivo hay que colocar la variable objetivo la última para que cuando la separemos del dataset \n",
    "#este colocada en primer lugar, si estuviera en el lugar 7 borrariamos del dataset las 7 últimas variables del dataset\n",
    "X, y = dataset.iloc[:,:-1], dataset.iloc[:,-1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Separamos en test 20% y train 80%\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size= 0.2, random_state=123)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "9        150000.0\n",
       "3178     169900.0\n",
       "15197    264000.0\n",
       "22254    365000.0\n",
       "5596     185000.0\n",
       "           ...   \n",
       "25944    575000.0\n",
       "4855     180000.0\n",
       "11603    231900.0\n",
       "1122     155000.0\n",
       "17278    285000.0\n",
       "Name: Sale_Price, Length: 5221, dtype: float64"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Observo que no habido ningún problema y la variable depediente es Sale_Price\n",
    "y_test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Aqui es donde debo colocar las mejores variables que hemos obtenido en la selección de variables\n",
    "#Colocar las variables que más información aportan al modelo\n",
    "all_columns_except_target_uno = [col for col in X_train.columns if col in ['FBaths','Style','HBaths','SqFt_Liv_Area','Year_Built',\n",
    "'Assoc_Fee_Paid','Carpeted','Ocean_View',\n",
    "'One_Space','Pets_Allowed','Waterfront','Intracoastal_View',\n",
    "'No_Lease_Onest_Year_Owned','Garage_Spaces'\n",
    ",'Ceramic','Tile','Beds','Housing_Older_Persons_Act',\n",
    "'Two_Or_More_Spaces','Wood','East_Of_Us_One'\n",
    ",'Ok_To_Lease','Corner_Unit','Zip_Code']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "ename": "ValueError",
     "evalue": "DataFrame.dtypes for data must be int, float or bool.\n                Did not expect the data types in fields Style, Pets_Allowed, Housing_Older_Persons_Act",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-9-89c25c4c1569>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m#Me quedo en los datos train con la selección de variable que hemos seleccionado y la variable objetivo\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mDM_train\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mxgb\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mDMatrix\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mX_train\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mall_columns_except_target_uno\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0my_train\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m/opt/anaconda3/lib/python3.7/site-packages/xgboost/core.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, data, label, weight, base_margin, missing, silent, feature_names, feature_types, nthread)\u001b[0m\n\u001b[1;32m    518\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    519\u001b[0m         data, feature_names, feature_types = _convert_dataframes(\n\u001b[0;32m--> 520\u001b[0;31m             \u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfeature_names\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfeature_types\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    521\u001b[0m         )\n\u001b[1;32m    522\u001b[0m         \u001b[0mmissing\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmissing\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mmissing\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnan\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/anaconda3/lib/python3.7/site-packages/xgboost/core.py\u001b[0m in \u001b[0;36m_convert_dataframes\u001b[0;34m(data, feature_names, feature_types, meta, meta_type)\u001b[0m\n\u001b[1;32m    418\u001b[0m                                                             \u001b[0mfeature_types\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    419\u001b[0m                                                             \u001b[0mmeta\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 420\u001b[0;31m                                                             meta_type)\n\u001b[0m\u001b[1;32m    421\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    422\u001b[0m     data, feature_names, feature_types = _maybe_dt_data(data,\n",
      "\u001b[0;32m/opt/anaconda3/lib/python3.7/site-packages/xgboost/core.py\u001b[0m in \u001b[0;36m_maybe_pandas_data\u001b[0;34m(data, feature_names, feature_types, meta, meta_type)\u001b[0m\n\u001b[1;32m    292\u001b[0m         msg = \"\"\"DataFrame.dtypes for data must be int, float or bool.\n\u001b[1;32m    293\u001b[0m                 Did not expect the data types in fields \"\"\"\n\u001b[0;32m--> 294\u001b[0;31m         \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmsg\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;34m', '\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mjoin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbad_fields\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    295\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    296\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mfeature_names\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mmeta\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mValueError\u001b[0m: DataFrame.dtypes for data must be int, float or bool.\n                Did not expect the data types in fields Style, Pets_Allowed, Housing_Older_Persons_Act"
     ]
    }
   ],
   "source": [
    "#Me quedo en los datos train con la selección de variable que hemos seleccionado y la variable objetivo\n",
    "DM_train = xgb.DMatrix(data=X_train[all_columns_except_target_uno], label=y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1038,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Parametros para el xgboost, aqui es donde se juega con los distintos parametros del Xgboost\n",
    "params = {\"objective\":\"reg:linear\",'colsample_bytree': 1,'learning_rate': 0.1,\n",
    "        'max_depth': 6, 'min_child_weight' : 5, 'gamma' : 0, 'subsample' : 1}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1039,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[17:08:05] WARNING: src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n"
     ]
    }
   ],
   "source": [
    "#Aplicamos el xgboost a los datos train colocando el número de arboles que mejor funciona en mi caso 800\n",
    "xg_reg = xgb.train(params = params, dtrain=DM_train, num_boost_round=800)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1040,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Aqui es donde debo colocar las mejores variables que hemos obtenido en la selección de variables \n",
    "#Deben ser las mismas que hemos colocado en el X_train logicamente\n",
    "all_columns_except_target_dos = [col for col in X_test.columns if col in ['FBaths','Style','HBaths','SqFt_Liv_Area','Year_Built',\n",
    "'Assoc_Fee_Paid','Carpeted','Ocean_View',\n",
    "'One_Space','Pets_Allowed','Waterfront','Intracoastal_View',\n",
    "'No_Lease_Onest_Year_Owned','Garage_Spaces',\n",
    "'Ceramic','Tile','Beds','Housing_Older_Persons_Act',\n",
    "'Two_Or_More_Spaces','Wood','East_Of_Us_One'\n",
    ",'Ok_To_Lease','Corner_Unit','Zip_Code']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1041,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Me quedo en los datos test con la selección de variable que hemos seleccionado y la variable objetivo\n",
    "DM_test = xgb.DMatrix(data=X_test[all_columns_except_target_dos],label=dataset['Sale_Price'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1042,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Predecimos los datos test con el modelo creado\n",
    "preds = xg_reg.predict(DM_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1043,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([154088.5 , 198166.77, 234677.42, ..., 242930.89, 158999.66,\n",
       "       310291.16], dtype=float32)"
      ]
     },
     "execution_count": 1043,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Vemos las predicciones\n",
    "preds"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1044,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean squared error: 1978505955.68\n",
      "Variance score: 0.79\n"
     ]
    }
   ],
   "source": [
    "# Error cuadrático medio\n",
    "print(\"Mean squared error: %.2f\" % mean_squared_error(y_test, preds))\n",
    "# Evaluamos el puntaje de varianza (siendo 1.0 el mejor posible)\n",
    "print('Variance score: %.2f' % r2_score(y_test, preds))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1045,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "xgb.plot_importance(xg_reg)\n",
    "plt.rcParams['figure.figsize'] = [5, 5]\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1046,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Z son las variables independientes de la nueva base de datos llamada datatest y w es la variable objetivo\n",
    "Z, w = datatest.iloc[:,:-1], datatest.iloc[:,-1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1047,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Necesitamos las mismas variables para nuestro nuevo datatest que utilizamos para el modelo\n",
    "all_columns_except_target_tres = [col for col in Z.columns if col in ['FBaths','Style','HBaths','SqFt_Liv_Area','Year_Built',\n",
    "'Assoc_Fee_Paid','Carpeted','Ocean_View',\n",
    "'One_Space','Pets_Allowed','Waterfront','Intracoastal_View',\n",
    "'No_Lease_Onest_Year_Owned','Garage_Spaces'\n",
    ",'Ceramic','Tile','Beds','Housing_Older_Persons_Act',\n",
    "'Two_Or_More_Spaces','Wood','East_Of_Us_One'\n",
    ",'Ok_To_Lease','Corner_Unit','Zip_Code']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1048,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Le implanto al dataset las variables seleccionadas\n",
    "DM_prueba = xgb.DMatrix(data=Z[all_columns_except_target_tres], label=w)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1049,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   FBaths  Style  HBaths  SqFt_Liv_Area  Year_Built  Assoc_Fee_Paid  Carpeted  \\\n",
      "1       1      1       0              0        1974            2640         0   \n",
      "2       2      1       0            972        1974               0         0   \n",
      "3       1      1       1            620        1973            5580         0   \n",
      "4       2      3       0            907        1987            2460         0   \n",
      "5       2      1       0            980        1979          363564         0   \n",
      "\n",
      "   Ocean_View  One_Space  Pets_Allowed  ...  Ceramic  Tile  Beds  \\\n",
      "1           0          1             1  ...        1     0     1   \n",
      "2           1          1             2  ...        0     1     2   \n",
      "3           0          1             2  ...        0     1     1   \n",
      "4           0          0             1  ...        0     1     2   \n",
      "5           0          1             2  ...        0     1     2   \n",
      "\n",
      "   Housing_Older_Persons_Act  Two_Or_More_Spaces  Wood  East_Of_Us_One  \\\n",
      "1                          1                   0     0               0   \n",
      "2                          1                   0     0               1   \n",
      "3                          1                   0     0               1   \n",
      "4                          1                   0     0               0   \n",
      "5                          1                   0     0               0   \n",
      "\n",
      "   Ok_To_Lease  Corner_Unit  Zip_Code  \n",
      "1            0            0     33172  \n",
      "2            0            0     33180  \n",
      "3            0            0     33160  \n",
      "4            0            0     33179  \n",
      "5            1            0     33012  \n",
      "\n",
      "[5 rows x 24 columns]\n"
     ]
    }
   ],
   "source": [
    "print(Z.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1050,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Aplicamos el predict con el modelo creado sobre los nuevos datos\n",
    "pred = xg_reg.predict(DM_prueba)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1051,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([163821.67, 205508.19, 144849.3 , 162789.47, 153928.4 , 160903.33,\n",
       "       171019.97, 199178.4 , 189923.67, 169040.11, 159954.19, 154088.5 ,\n",
       "       180870.45, 156831.89, 157829.44, 178571.83, 190998.92, 152531.97,\n",
       "       184122.34, 181227.52, 153427.72, 143815.23, 174348.56, 183533.39,\n",
       "       151236.6 , 178881.39, 142032.58, 149670.92, 156258.88, 177088.39,\n",
       "       169720.55, 200607.48, 185821.55, 145898.58, 200470.11, 150183.36,\n",
       "       152449.88, 151649.72, 164931.75, 144875.12, 157884.73, 151207.94,\n",
       "       160040.8 , 158359.77, 152349.92, 162570.58, 153766.28, 214033.78,\n",
       "       164697.22, 145607.36, 146442.64, 154442.52, 168766.12, 160796.52,\n",
       "       157148.42, 196554.05, 191783.66, 181229.95, 151773.52, 147193.06,\n",
       "       206571.89, 170044.56, 187930.2 , 164275.77, 171118.34, 152455.61,\n",
       "       165442.5 , 150656.52, 156753.12, 177044.73, 180508.5 , 202087.39,\n",
       "       194737.89, 171918.86, 171361.02, 182838.6 , 174008.7 , 160896.8 ,\n",
       "       156074.53, 161110.89, 161071.3 , 171580.88, 234861.1 , 155109.16,\n",
       "       176894.77, 156923.73, 155351.67, 163075.67, 160385.78, 189774.86,\n",
       "       176215.5 , 167729.19, 169796.11, 172225.81, 485774.2 , 177771.69,\n",
       "       149149.55, 162288.39, 175363.14, 207656.33, 179233.1 , 152923.66,\n",
       "       183481.08, 171608.53, 176919.53, 153649.53, 158958.47, 158647.98,\n",
       "       169477.62, 173653.94, 153732.45, 184402.25, 173684.52, 156824.69,\n",
       "       193941.48, 181316.77, 175428.66, 179699.5 , 151423.89, 188133.67,\n",
       "       179084.39, 165863.98, 171498.11, 163166.94, 161092.28, 163387.03,\n",
       "       168209.16, 169963.  , 179073.1 , 209220.61, 168436.84, 166989.58,\n",
       "       157597.58, 152985.33, 163218.36, 162385.42, 141970.39, 201140.06,\n",
       "       166872.52, 186721.19, 185433.3 , 158624.98, 172673.27, 225458.05,\n",
       "       176570.1 , 158719.98, 163806.48, 151043.55, 178316.98, 160733.36,\n",
       "       166465.3 , 159953.  , 145065.2 , 142193.47, 178053.72, 164849.25,\n",
       "       187411.05, 169821.23, 168704.33, 172699.17, 167834.17, 215244.73,\n",
       "       184901.6 , 150444.36, 177603.08, 144977.81, 156625.88, 163089.72,\n",
       "       156841.52, 199296.84, 171382.38, 160407.86, 169897.16, 163198.98,\n",
       "       157727.12, 167578.33, 167491.05, 158007.44, 178722.31, 160698.73,\n",
       "       151782.55, 159663.05, 255339.12, 174206.84, 187679.06, 178171.95,\n",
       "       179851.62, 153636.02, 153886.97, 174388.56, 174653.81, 182657.11,\n",
       "       175227.4 , 184549.14, 169604.83, 167668.34, 248412.52, 184619.86,\n",
       "       146287.69, 165748.23, 210097.38, 176133.56, 147912.92, 165849.17,\n",
       "       245191.38, 169243.62, 168221.3 , 181147.38, 205463.72, 209970.11,\n",
       "       181953.9 , 142540.73, 191253.89, 192240.7 , 153479.97, 169537.86],\n",
       "      dtype=float32)"
      ]
     },
     "execution_count": 1051,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Comprobamos que dan resultados, este paso solo nos sirve para cuando el usuario rellene los datos ver que generan puntuaciones\n",
    "pred"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1052,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['modelo_XGBM_menosdeseis_Flats.xg_reg']"
      ]
     },
     "execution_count": 1052,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import joblib\n",
    "filename = \"modelo_XGBM_menosdeseis_Flats.xg_reg\"\n",
    "joblib.dump(xg_reg, filename)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
